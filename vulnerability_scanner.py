# --- File: vulnerability_scanner.py (Đã chú thích và cải thiện) ---
import re

# "Cơ sở dữ liệu" các mẫu regex để tìm dấu hiệu lỗ hổng.
# Mỗi key là mô tả lỗ hổng, value là một biểu thức chính quy đã được biên dịch.
PATTERNS = {
    # Rủi ro: Có thể bị tấn công Cross-Site Scripting (XSS) nếu load nội dung web không đáng tin cậy.
    "WebView - Javascript được bật (Nguy cơ XSS)": re.compile(b'setJavaScriptEnabled', re.IGNORECASE),
    
    # Rủi ro: Dữ liệu truyền đi không được mã hóa, có thể bị nghe lén (tấn công Man-in-the-Middle).
    "Sử dụng HTTP không an toàn": re.compile(b'http://'),
    
    # Rủi ro: Dữ liệu lưu trên bộ nhớ ngoài có thể bị mọi ứng dụng khác đọc nếu có quyền.
    "Sử dụng bộ nhớ ngoài (External Storage)": re.compile(b'getExternalStorageDirectory|getExternalFilesDir'),
    
    # Rủi ro: Dữ liệu lưu trong SharedPreferences không được mã hóa, dễ bị đánh cắp trên máy đã root.
    "Dấu hiệu lưu trữ không mã hóa (SharedPreferences)": re.compile(b'getSharedPreferences'),
    
    # Rủi ro: Nhúng cứng thông tin nhạy cảm vào code là một lỗi bảo mật nghiêm trọng.
    "Dấu hiệu thông tin nhạy cảm bị hardcode": re.compile(b'apikey|secret|password|token', re.IGNORECASE),

    # --- CẢI TIẾN: THÊM MẪU MỚI ---
    # Rủi ro: Lập trình viên thường quên xóa các lệnh log, làm lộ thông tin nhạy cảm trong quá trình debug.
    "Ghi log (Nguy cơ rò rỉ thông tin)": re.compile(b'Log\.d|Log\.e|Log\.i|Log\.v|Log\.w')
}

def scan_for_vulnerabilities(dvm_format):
    """Quét mã nguồn DEX để tìm các mẫu code/chuỗi văn bản không an toàn."""
    findings = {}
    
    try:
        # Lấy tất cả các chuỗi văn bản (strings) từ file DEX
        all_strings = dvm_format.get_strings()
    except Exception:
        all_strings = []

    # Lặp qua từng mẫu regex trong "cơ sở dữ liệu"
    for key, pattern in PATTERNS.items():
        count = 0
        # Lặp qua từng chuỗi tìm được trong file APK
        for s in all_strings:
            # isinstance(s, bytes) để đảm bảo chuỗi là dạng bytes, tránh lỗi
            if isinstance(s, bytes) and pattern.search(s):
                count += 1
        
        # Nếu tìm thấy ít nhất 1 lần xuất hiện, ghi nhận kết quả
        if count > 0:
            findings[key] = f"{count} lần xuất hiện"
            
    return findings
